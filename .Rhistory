x1 <- makeInverse(matrix(c(1,2,3,4),2,2))
source('C:/Users/mlega7152795/Desktop/Coursera/ProgrammingAssignment2-master/cachematrix.R')
x1 <- makeInverse(matrix(c(1,2,3,4),2,2))
x1$getsolve() #Inverse not computed yet
cachesolve(x1) #inverse returned after computation
cachesolve(x1) #invers returned from cache
x1$set(x1$getsolve()) #Setting the function call to be the computed inverse
x1$set(x1$getsolve()) #Setting the function call to be the computed inverse
cachesolve(x1) #Inverse of the inverse is the original matrix
cachesolve(x1) #Inverse of the inverse is the original matrix
cachesolve(x1) #Inverse of the inverse is the original matrix
source('C:/Users/mlega7152795/Desktop/Coursera/ProgrammingAssignment2-master/cachematrix.R')
function (data = NA, dim = length(data), dimnames = NULL)
{
if (is.atomic(data) && !is.object(data))
return(.Internal(array(data, dim, dimnames)))
data <- as.vector(data)
if (is.object(data)) {
dim <- as.integer(dim)
if (!length(dim))
stop("'dims' cannot be of length 0")
vl <- prod(dim)
if (length(data) != vl) {
if (vl > .Machine$integer.max)
stop("'dim' specifies too large an array")
data <- rep_len(data, vl)
}
if (length(dim))
dim(data) <- dim
if (is.list(dimnames) && length(dimnames))
dimnames(data) <- dimnames
data
}
else .Internal(array(data, dim, dimnames))
}
source('C:/Users/mlega7152795/Desktop/Coursera/ProgrammingAssignment2-master/cachematrix.R')
cachesolve(x1) #Inverse of the inverse is the original matrix
message("retrieving inverse")
return(i) ##If i is not null then return
if(!is.null(i)) {
message("retrieving inverse")
return(i) ##If i is not null then return
}
data <- x$get() #Called matrix is retrieved
i <- solve(data, ...) #Inverse is computed
x$setsolve(i) #and cached in list
i
cachesolve <- function(x, ...) {
i <- x$getsolve() #Retrieves the inverse
if(!is.null(i)) {
message("retrieving inverse")
return(i) ##If i is not null then return
}
data <- x$get() #Called matrix is retrieved
i <- solve(data, ...) #Inverse is computed
x$setsolve(i) #and cached in list
i
}
source('C:/Users/mlega7152795/Desktop/Coursera/ProgrammingAssignment2-master/cachematrix.R')
}
source('C:/Users/mlega7152795/Desktop/Coursera/ProgrammingAssignment2-master/cachematrix.R')
i #return to user
cachesolve <- function(x, ...) {
i <- x$getsolve() #Retrieves the inverse
if(!is.null(i)) {
message("retrieving inverse")
return(i) ##If i is not null then return
}
data <- x$get() #Called matrix is retrieved
i <- solve(data, ...) #Inverse is computed
x$setsolve(i) #and cached in list
i #return to user
}
x1 <- makeInverse(matrix(c(1,2,3,4),2,2))
x1$getsolve() #Inverse not computed yet
cachesolve(x1) #inverse returned after computation
cachesolve(x1) #invers returned from cache
x1$set(x1$getsolve())
cachesolve(x1)
source('C:/Users/mlega7152795/Desktop/Coursera/ProgrammingAssignment2-master/cachematrix.R')
source('C:/Users/mlega7152795/Desktop/Coursera/ProgrammingAssignment2-master/cachematrix.R')
source('C:/Users/mlega7152795/Desktop/Coursera/ProgrammingAssignment2-master/cachematrix.R')
source('C:/Users/mlega7152795/Desktop/Coursera/ProgrammingAssignment2-master/cachematrix.R')
source('C:/Users/mlega7152795/Desktop/Coursera/ProgrammingAssignment2-master/cachematrix.R')
##This is a list of functions
makeInverse <- function(x = matrix()) {
i <- NULL #Sets the inverse to NULL
set <- function(y) {
x <<- y ##Saves called matrix outside present environment
i <<- NULL #Reset inverse to null every time called matrix is changed
}
get <- function() {x} ##Returns called matrix
setsolve <- function(solve) {i <<- solve} ##Saves inverse outside present environment
getsolve <- function() {i} ##Returns the Inverse
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
x1 <- makeInverse(matrix(c(1,2,3,4),2,2))
x1$getsolve()
cachesolve(x1)
cachesolve(x1)
x1$set(x1$getsolve())
cachesolve(x1)
source('C:/Users/mlega7152795/Desktop/Coursera/ProgrammingAssignment2-master/cachematrix.R')
source('C:/Users/mlega7152795/Desktop/Coursera/ProgrammingAssignment2-master/cachematrix.R')
source('C:/Users/mlega7152795/Desktop/Coursera/ProgrammingAssignment2-master/cachematrix.R')
